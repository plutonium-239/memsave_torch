Search.setIndex({"docnames": ["api/index", "api/nn", "api/util/collect_results", "api/util/estimate", "api/util/index", "api/util/measurements", "basic_usage", "index"], "filenames": ["api\\index.rst", "api\\nn.rst", "api\\util\\collect_results.rst", "api\\util\\estimate.rst", "api\\util\\index.rst", "api\\util\\measurements.rst", "basic_usage.rst", "index.rst"], "titles": ["API", "nn", "collect_results.py", "estimate.py", "util", "&lt;no title&gt;", "Installation", "Welcome to MemSave PyTorch\u2019s documentation!"], "terms": {"util": [0, 2, 3, 7], "packag": 0, "The": [0, 1, 2, 3, 6], "consist": 0, "two": 0, "main": 0, "thi": [0, 1, 2, 3], "tri": 0, "mirror": 0, "torch": [0, 1, 6], "offer": 0, "follow": [0, 1, 3], "layer": [0, 3], "readili": 0, "replac": [0, 1], "call": [0, 2], "convert_to_memory_sav": [0, 1, 6], "function": [0, 2, 3, 6], "modul": [1, 3, 6, 7], "contain": 1, "member": 1, "memsaveconv2d": 1, "memsavelinear": 1, "memsaverelu": 1, "memsavemaxpool2d": 1, "memsavebatchnorm2d": 1, "memsavelayernorm": 1, "implement": 1, "memori": [1, 2, 3, 4, 6], "save": [1, 2, 3, 6], "neural": [1, 3], "network": [1, 3], "current": 1, "linear": [1, 2, 3], "conv2d": 1, "batchnorm2d": 1, "memsave_torch": [1, 2, 3, 6], "model": [1, 2, 3, 6], "true": [1, 3], "relu": 1, "maxpool2d": 1, "layernorm": 1, "verbos": 1, "fals": [1, 3], "clone_param": 1, "convert": [1, 3], "given": [1, 2], "": 1, "memsav": 1, "version": 1, "option": [1, 2, 3], "choos": 1, "which": [1, 2, 3], "type": [1, 2, 3], "should": 1, "us": [1, 2], "when": [1, 3], "you": 1, "plan": 1, "both": 1, "simultan": 1, "otherwis": 1, "grad": [1, 3], "accumul": 1, "one": [1, 3], "wll": 1, "affect": 1, "other": 1, "sinc": 1, "weight": [1, 3], "ar": [1, 2], "same": [1, 3], "tensor": [1, 3], "object": 1, "For": 1, "an": [1, 3], "exampl": 1, "see": [1, 3], "test": 1, "test_lay": 1, "py": [1, 4], "paramet": [1, 2, 3], "input": [1, 3], "bool": [1, 3], "whether": [1, 3], "print": [1, 2, 3], "were": 1, "clone": 1, "directli": 1, "return": [1, 2, 3], "memsavemodel": 1, "class": [1, 2], "in_channel": 1, "int": [1, 2], "out_channel": 1, "kernel_s": 1, "stride": 1, "1": 1, "pad": 1, "0": 1, "dilat": 1, "group": 1, "bia": 1, "padding_mod": 1, "str": [1, 2, 3], "zero": 1, "devic": [1, 2, 3], "none": [1, 2, 3], "dtype": 1, "init": 1, "param": 1, "forward": [1, 3, 4], "pass": [1, 3, 4, 6], "b": 1, "c_in": 1, "h": 1, "w": 1, "output": [1, 2], "c_out": 1, "h_out": 1, "w_out": 1, "classmethod": 1, "from_nn_conv2d": 1, "obj": 1, "in_featur": 1, "out_featur": 1, "x": [1, 3], "f_in": 1, "f_out": 1, "from_nn_linear": 1, "from_nn_relu": 1, "return_indic": 1, "ceil_mod": 1, "from_nn_maxpool2d": 1, "num_featur": 1, "ep": 1, "1e": 1, "05": 1, "momentum": 1, "affin": 1, "track_running_stat": 1, "c": 1, "from_nn_batchnorm2d": 1, "bn2d": 1, "normalized_shap": 1, "elementwise_affin": 1, "introduc": 1, "v2": 1, "from_nn_layernorm": 1, "ln": 1, "resultscollector": 2, "handl": 2, "collect": [2, 4], "organ": 2, "result": [2, 3], "from": [2, 6], "temp": 2, "file": 2, "gener": 2, "estim": [2, 4], "script": [2, 3], "make": 2, "datafram": 2, "all": [2, 3], "case": [2, 3], "batch_siz": 2, "input_channel": 2, "input_hw": 2, "num_class": 2, "architectur": [2, 3], "vjp_improv": 2, "list": [2, 3], "float": 2, "results_dir": [2, 3], "callabl": [2, 3], "bound": 2, "method": 2, "tqdm": 2, "write": 2, "std": 2, "read": 2, "directori": 2, "initi": 2, "collector": 2, "befor": 2, "run": [2, 3], "conv": [2, 3], "union": 2, "base": 2, "dir": 2, "i": [2, 3, 6], "e": 2, "caus": [2, 3], "problem": 2, "context": 2, "clear_fil": 2, "clear": 2, "after": [2, 3], "stat": 2, "time": [2, 3, 4], "collect_from_fil": 2, "To": 2, "have": [2, 3], "finish": 2, "name": 2, "rais": 2, "assertionerror": 2, "If": 2, "ha": [2, 3], "more": 2, "less": 2, "line": 2, "than": 2, "expect": 2, "number": 2, "valueerror": 2, "unallow": 2, "text": 2, "onli": [2, 3], "allow": 2, "been": 2, "csv": 2, "hyperparam_str": 2, "arg": [2, 3], "simplenamespac": 2, "format": 2, "hyperparam": 2, "string": 2, "make_case_str": 2, "obsrev": 3, "peak": 3, "total": 3, "taken": 3, "till": 3, "backward": [3, 4], "possibl": 3, "speed": 3, "up": 3, "random": 3, "vjp": 3, "convolut": 3, "we": 3, "take": 3, "cnn": 3, "answer": 3, "question": 3, "q1": 3, "what": 3, "rel": 3, "consum": [3, 4], "q2": 3, "assum": 3, "achiev": 3, "would": 3, "optim": 3, "step": 3, "q3": 3, "term": 3, "consumpt": [3, 4], "estimate_mem_sav": 3, "model_fn": 3, "loss_fn": 3, "y": 3, "target": 3, "dict": 3, "dev": 3, "return_v": 3, "set": 3, "loss": 3, "label": 3, "detect": 3, "comput": 3, "indic": 3, "valu": 3, "default": 3, "requir": 3, "estimate_speedup": 3, "train": 3, "parse_cas": 3, "small": 3, "helper": 3, "kw": 3, "argument": 3, "measur": [3, 4], "dictionari": 3, "kei": 3, "allowed_cas": 3, "present": 3, "dont": 3, "start": 3, "no_": 3, "skip_case_check": 3, "namespac": 3, "decid": 3, "skip": 3, "grad_norm_": 3, "doe": 3, "ani": 3, "normal": 3, "argpars": 3, "A": 4, "dure": 4, "variou": 4, "collect_result": 4, "pip": 6, "git": 6, "http": 6, "github": 6, "com": 6, "plutonium": 6, "239": 6, "nn": [6, 7], "handi": 6, "tool": 6, "counterpart": 6, "import": 6, "my_torch_model": 6, "memsave_torch_model": 6, "instal": 7, "api": 7, "index": 7, "search": 7, "page": 7}, "objects": {"": [[0, 0, 0, "-", "memsave_torch"]], "memsave_torch": [[1, 0, 0, "-", "nn"], [4, 0, 0, "-", "util"]], "memsave_torch.nn": [[1, 1, 1, "", "MemSaveBatchNorm2d"], [1, 1, 1, "", "MemSaveConv2d"], [1, 1, 1, "", "MemSaveLayerNorm"], [1, 1, 1, "", "MemSaveLinear"], [1, 1, 1, "", "MemSaveMaxPool2d"], [1, 1, 1, "", "MemSaveReLU"], [1, 3, 1, "", "convert_to_memory_saving"]], "memsave_torch.nn.MemSaveBatchNorm2d": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "from_nn_BatchNorm2d"]], "memsave_torch.nn.MemSaveConv2d": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "from_nn_Conv2d"]], "memsave_torch.nn.MemSaveLayerNorm": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "from_nn_LayerNorm"]], "memsave_torch.nn.MemSaveLinear": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "from_nn_Linear"]], "memsave_torch.nn.MemSaveMaxPool2d": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "from_nn_MaxPool2d"]], "memsave_torch.nn.MemSaveReLU": [[1, 2, 1, "", "forward"], [1, 2, 1, "", "from_nn_ReLU"]], "memsave_torch.util": [[2, 0, 0, "-", "collect_results"], [3, 0, 0, "-", "estimate"]], "memsave_torch.util.collect_results": [[2, 1, 1, "", "ResultsCollector"], [2, 3, 1, "", "hyperparam_str"], [2, 3, 1, "", "make_case_str"]], "memsave_torch.util.collect_results.ResultsCollector": [[2, 2, 1, "", "clear_file"], [2, 2, 1, "", "collect_from_file"], [2, 2, 1, "", "finish"]], "memsave_torch.util.estimate": [[3, 3, 1, "", "estimate_mem_savings"], [3, 3, 1, "", "estimate_speedup"], [3, 3, 1, "", "parse_case"], [3, 3, 1, "", "skip_case_check"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "avail": 0, "modul": 0, "memsave_torch": 0, "nn": [0, 1], "learnabl": 1, "layer": [1, 6], "activ": 1, "pool": 1, "normal": 1, "collect_result": 2, "py": [2, 3], "estim": 3, "util": 4, "class": 4, "script": 4, "instal": 6, "replac": 6, "all": 6, "valid": 6, "memsav": [6, 7], "welcom": 7, "pytorch": 7, "": 7, "document": 7, "get": 7, "start": 7, "indic": 7, "tabl": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"API": [[0, "api"]], "Available Modules": [[0, null]], "memsave_torch.nn": [[0, "memsave-torch-nn"]], "nn": [[1, "nn"]], "Learnable Layers": [[1, "learnable-layers"]], "Activations and Pooling Layers": [[1, "activations-and-pooling-layers"]], "Normalization Layers": [[1, "normalization-layers"]], "collect_results.py": [[2, "collect-results-py"]], "estimate.py": [[3, "estimate-py"]], "util": [[4, "util"]], "Utility classes and scripts": [[4, null]], "Installation": [[6, "installation"]], "Replace all (valid) layers with MemSave layers": [[6, "replace-all-valid-layers-with-memsave-layers"]], "Welcome to MemSave PyTorch\u2019s documentation!": [[7, "welcome-to-memsave-pytorch-s-documentation"]], "Getting started": [[7, null]], "Indices and tables": [[7, "indices-and-tables"]]}, "indexentries": {"memsave_torch": [[0, "module-memsave_torch"]], "module": [[0, "module-memsave_torch"], [1, "module-memsave_torch.nn"], [2, "module-memsave_torch.util.collect_results"], [3, "module-memsave_torch.util.estimate"], [4, "module-memsave_torch.util"]], "memsavebatchnorm2d (class in memsave_torch.nn)": [[1, "memsave_torch.nn.MemSaveBatchNorm2d"]], "memsaveconv2d (class in memsave_torch.nn)": [[1, "memsave_torch.nn.MemSaveConv2d"]], "memsavelayernorm (class in memsave_torch.nn)": [[1, "memsave_torch.nn.MemSaveLayerNorm"]], "memsavelinear (class in memsave_torch.nn)": [[1, "memsave_torch.nn.MemSaveLinear"]], "memsavemaxpool2d (class in memsave_torch.nn)": [[1, "memsave_torch.nn.MemSaveMaxPool2d"]], "memsaverelu (class in memsave_torch.nn)": [[1, "memsave_torch.nn.MemSaveReLU"]], "convert_to_memory_saving() (in module memsave_torch.nn)": [[1, "memsave_torch.nn.convert_to_memory_saving"]], "forward() (memsave_torch.nn.memsavebatchnorm2d method)": [[1, "memsave_torch.nn.MemSaveBatchNorm2d.forward"]], "forward() (memsave_torch.nn.memsaveconv2d method)": [[1, "memsave_torch.nn.MemSaveConv2d.forward"]], "forward() (memsave_torch.nn.memsavelayernorm method)": [[1, "memsave_torch.nn.MemSaveLayerNorm.forward"]], "forward() (memsave_torch.nn.memsavelinear method)": [[1, "memsave_torch.nn.MemSaveLinear.forward"]], "forward() (memsave_torch.nn.memsavemaxpool2d method)": [[1, "memsave_torch.nn.MemSaveMaxPool2d.forward"]], "forward() (memsave_torch.nn.memsaverelu method)": [[1, "memsave_torch.nn.MemSaveReLU.forward"]], "from_nn_batchnorm2d() (memsave_torch.nn.memsavebatchnorm2d class method)": [[1, "memsave_torch.nn.MemSaveBatchNorm2d.from_nn_BatchNorm2d"]], "from_nn_conv2d() (memsave_torch.nn.memsaveconv2d class method)": [[1, "memsave_torch.nn.MemSaveConv2d.from_nn_Conv2d"]], "from_nn_layernorm() (memsave_torch.nn.memsavelayernorm class method)": [[1, "memsave_torch.nn.MemSaveLayerNorm.from_nn_LayerNorm"]], "from_nn_linear() (memsave_torch.nn.memsavelinear class method)": [[1, "memsave_torch.nn.MemSaveLinear.from_nn_Linear"]], "from_nn_maxpool2d() (memsave_torch.nn.memsavemaxpool2d class method)": [[1, "memsave_torch.nn.MemSaveMaxPool2d.from_nn_MaxPool2d"]], "from_nn_relu() (memsave_torch.nn.memsaverelu class method)": [[1, "memsave_torch.nn.MemSaveReLU.from_nn_ReLU"]], "memsave_torch.nn": [[1, "module-memsave_torch.nn"]], "resultscollector (class in memsave_torch.util.collect_results)": [[2, "memsave_torch.util.collect_results.ResultsCollector"]], "clear_file() (memsave_torch.util.collect_results.resultscollector method)": [[2, "memsave_torch.util.collect_results.ResultsCollector.clear_file"]], "collect_from_file() (memsave_torch.util.collect_results.resultscollector method)": [[2, "memsave_torch.util.collect_results.ResultsCollector.collect_from_file"]], "finish() (memsave_torch.util.collect_results.resultscollector method)": [[2, "memsave_torch.util.collect_results.ResultsCollector.finish"]], "hyperparam_str() (in module memsave_torch.util.collect_results)": [[2, "memsave_torch.util.collect_results.hyperparam_str"]], "make_case_str() (in module memsave_torch.util.collect_results)": [[2, "memsave_torch.util.collect_results.make_case_str"]], "memsave_torch.util.collect_results": [[2, "module-memsave_torch.util.collect_results"]], "estimate_mem_savings() (in module memsave_torch.util.estimate)": [[3, "memsave_torch.util.estimate.estimate_mem_savings"]], "estimate_speedup() (in module memsave_torch.util.estimate)": [[3, "memsave_torch.util.estimate.estimate_speedup"]], "memsave_torch.util.estimate": [[3, "module-memsave_torch.util.estimate"]], "parse_case() (in module memsave_torch.util.estimate)": [[3, "memsave_torch.util.estimate.parse_case"]], "skip_case_check() (in module memsave_torch.util.estimate)": [[3, "memsave_torch.util.estimate.skip_case_check"]], "memsave_torch.util": [[4, "module-memsave_torch.util"]]}})